# (1) Create Collection
MongoDB creates collection when the data is first inserted if it does not exist.
Use databaseName will create a database if it doesn't exist

use usermanaged
# to drop database
db.dropDatabase()

Check wheich database you are in.
db

# (2) How to Create Collection and Insert Records
use usermanaged
db.customers.insert( 
        { "firstName":"John", 
          "lastName":"West", 
          "email":"john.west@mail.com", 
          "phone":"032345432134",
          "BusinessType": ["Sell", "Sugar", "Drinks"],
          "Reference":100,
          "Company":"Coca-Cola"}) 

# It really doesn't matter if you put doublequote or not
db.customers.insert( 
        { firstName:'John', 
          lastName:'West', 
          email:'john.west@mail.com', 
          phone:'032345432134',
          BusinessType: ['Sell', 'Sugar', 'Drinks'],
          Reference:100,
          Company:'Coca-Cola'}) 

# You can drop it like this
db.customers.drop()

# 2-2 Check if the record is inserted
db.customers.find().pretty()
db.customers.find().limit(1)

db.transactions.count()

# (3) How to Create Collection and Load it with Json File 
# Note that mongoimport can be used for json, csv and tsv - Avoid using mongoimport and mongoexport for full instance production backups. They do not reliably preserve all rich BSON data types, because JSON can only represent a subset of the types supported by BSON.
# This needs readWrite access
# for multiple records, you need jsonArray option. Otherwise you get the error message: Failed: error unmarshaling bytes on document #0: JSON decoder out of sync - data changing underfoot?

These commands should be run from the terminal. If you are in the mongo client mode, quit it.
Otherwise you get an error: [thread1] SyntaxError: missing ; before statement @(shell):1:14
quit()
# 1: Drop the collection if exists and then recreate the new one before importing.
mongoimport --db usermanaged --jsonArray --collection transactions --drop --file C:\tmp\transaction.json
# 2: Append to the exisiting collection
mongoimport --db usermanaged --jsonArray --collection transactions --mode insert --file C:\tmp\transaction.json
# 3: Upsert from the file
mongoimport --db usermanaged --jsonArray --collection transactions --mode upsert --upsertFields Id --file  C:\tmp\transaction_upsert.json

Check count
mongo
db.transactions.count()
db.transactions.find().pretty()

(4) How to Create Collection and Load it with CSV File
# --headerline and --type csv are required

mongoimport --db usermanaged --collection online_news_popularity --type csv --headerline --file C:\tmp\OnlineNewsPopularity.csv

db.online_news_popularity.find().limit(3).pretty()
db.online_news_popularity.count()

(5) Query operator
# 1. Find a record in transactions where name is tom
db.transactions.find({Name: 'Tom'})

# 2. Find a record in transactions where total payment amount is 400.
# When chaining key with dot, you need doublequote.
db.transactions.find({"Payment.Total": 400 })
db.transactions.find({"Payment.Total": {$eq: 400}})

# 3. Find a record in transactions collection where price is greater than 400
db.transactions.find({"Transaction.price": {$gt: 400} })
# can do equal or greater than, too.
db.transactions.find({"Transaction.price": {$gte: 400} })

# 4. Find a record in transacaions collection where note is null or missing
db.transactions.find({"Note": null})

# 5. Find a record where only Note key is missing
db.transactions.find({Note: {$exists: false } })

#6. Null only
db.transactions.find({Note: {$type: 10 } })

# 1. Calculate the total transaction amount by aggregating Payment.Total in all records
db.transactions.aggregate({
    $group: {
        _id: '',
        TotalRevenue: { $sum: '$Payment.Total' }
    }
 })

# 2. Aggregate per record by aggregating Transaction.price
db.transactions.aggregate([
   {
     $project: {
       revenueTotal: { $sum: "$Transaction.price"},
     }
   }
])

# 3. Aggregate per payment type by adding up Payment.Total
db.transactions.aggregate([
     {
       $group:
         {
          _id: "$Payment.Type",
           totalAmount: { $sum: "$Payment.Total" },
           count: { $sum: 1 }
         }
     }
])


# 4. Find the max id 
db.transactions.aggregate([
    {
        $group:
        {
            _id: '',
            maxId: {$max: "$Id"}
        }
    }
])

# 5. Find the max Transaction.price
# Transaction.price is an array. So find the array containing maximum price and then extract
# the max price from the array with another $max.
db.transactions.aggregate([
    {
        $group:
        {
            _id: '',
            maxPrice: {$max: {$max: "$Transaction.price"}}
        }
    }
])

CURD OPERATION

# 1. Inserting a record into transaction
db.transactions.insert(
    {
    "Id": 110,
    "Name": "Inserted Record",
    "TransactionId": "tranNew1",
  "Transaction": [
    {
    "ItemId":"c324",
    "price": 456
    },
    {
    "ItemId":"d456",
    "price": 543   
    }
  ],
  "Subscriber": false,
  "Payment": {
    "Type": "Debit-Card",
    "Total": 999,
    "Success": true
  },
  "Note":'Hello World'
})

# check the record
db.transactions.find({Id:110})

# 2. Updating the newly inserted record above. 
db.transactions.update({Id:110},{$set:{Name:'Updated Record',Note:'Updated!'}})

# 3. Deleting record
db.transaction.remove({Id:110})


REFERENCE

mongoimport: https://docs.mongodb.com/manual/reference/program/mongoimport/
Query and Projection Operators: https://docs.mongodb.com/manual/reference/operator/query/#query-selectors
Greater than operator: https://docs.mongodb.com/manual/reference/operator/query/gt/#op._S_gt
Query for null or missing fields: https://docs.mongodb.com/v3.2/tutorial/query-for-null-fields/
Aggreation Sum Reference: https://docs.mongodb.com/manual/reference/operator/aggregation/sum/
Aggregation Max Reference: https://docs.mongodb.com/manual/reference/operator/aggregation/max/
